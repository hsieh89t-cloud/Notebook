/*
[MoodNotebook_Tools]
version: v2.0.0
scope: 綁定 Mood Notebook 試算表
目的：後台工具維護三個分頁（MoodJournal / MoodRecycle / MoodComments）
*/

var 時區 = 'Asia/Taipei';
var 主表名 = 'MoodJournal';
var 回收名 = 'MoodRecycle';
var 留言表名 = 'MoodComments';

var 主表表頭 = ['記錄時間','心情指數','情緒主題','標題','標籤','正文','亮點摘錄','配色','ID','回收'];
var 回收表頭 = ['記錄時間','心情指數','情緒主題','標題','標籤','正文','亮點摘錄','配色','ID','刪除時間','永久刪除'];
var 留言表頭 = ['留言ID','筆記ID','留言時間','留言者','留言內容','狀態'];

function onOpen(){
  SpreadsheetApp.getUi()
    .createMenu('Mood Notebook')
    .addItem('健檢（僅檢查）','健檢僅檢查')
    .addItem('健檢並修復欄位','健檢修復')
    .addSeparator()
    .addItem('清理回收桶（到期與勾選）','清理回收桶')
    .addItem('清理已刪留言','清理留言')
    .addSeparator()
    .addItem('導出今天的心情','導出今天')
    .addItem('導出日期區間…','導出區間對話框')
    .addToUi();
}

function 表(){ return SpreadsheetApp.getActive(); }
function _確保表(name, heads){
  var sh=表().getSheetByName(name);
  if(!sh){ sh=表().insertSheet(name); }
  if(heads && heads.length){
    var rng=sh.getRange(1,1,1,heads.length);
    rng.clearContent();
    rng.setValues([heads]);
  }
  return sh;
}
function 主表(){ return _確保表(主表名, 主表表頭); }
function 回收表(){ return _確保表(回收名, 回收表頭); }
function 留言表(){ return _確保表(留言表名, 留言表頭); }
function _讀表(sh){ var v=sh.getDataRange().getValues(); return {heads:(v[0]||[]).map(String), rows:v.slice(1)}; }
function _欄位索引(heads){ var map={}; heads.forEach(function(h,i){ map[String(h)]=i; }); return map; }
function _nowISO(){ return Utilities.formatDate(new Date(),時區,"yyyy-MM-dd'T'HH:mm:ssXXX"); }
function _alert(msg){ SpreadsheetApp.getUi().alert(String(msg)); }

function 健檢僅檢查(){ _alert(_健檢(false)); }
function 健檢修復(){ _alert(_健檢(true)); }

function _健檢(修復){
  var logs=['健檢時間：'+_nowISO()+(修復?'（修復）':'（檢查）')];
  try{
    var sh=主表();
    logs.push('主表現有列：'+Math.max(sh.getLastRow()-1,0));
    if(修復){
      sh.getRange(1,1,1,主表表頭.length).setValues([主表表頭]);
      try{ sh.getRange(2,10,Math.max(sh.getLastRow()-1,1),1).insertCheckboxes(); }catch(_){ logs.push('主表回收欄核取設定失敗'); }
    }
  }catch(e){ logs.push('主表錯誤：'+e); }

  try{
    var tr=回收表();
    logs.push('回收桶列數：'+Math.max(tr.getLastRow()-1,0));
    if(修復){
      tr.getRange(1,1,1,回收表頭.length).setValues([回收表頭]);
      try{ tr.getRange(2,11,Math.max(tr.getLastRow()-1,1),1).insertCheckboxes(); }catch(_){ logs.push('永久刪除核取設定失敗'); }
      try{ tr.getRange(2,10,Math.max(tr.getLastRow()-1,1),1).setNumberFormat('yyyy/mm/dd hh:mm'); }catch(_){ }
    }
  }catch(e){ logs.push('回收桶錯誤：'+e); }

  try{
    var cm=留言表();
    logs.push('留言列數：'+Math.max(cm.getLastRow()-1,0));
    if(修復){ cm.getRange(1,1,1,留言表頭.length).setValues([留言表頭]); }
  }catch(e){ logs.push('留言表錯誤：'+e); }

  return logs.join('\n');
}

function 清理回收桶(){
  var sh=回收表();
  var data=_讀表(sh);
  if(!data.rows.length) return _alert('回收桶目前為空');
  var idx=_欄位索引(data.heads);
  var keepDays=21;
  var today=new Date(); today.setHours(0,0,0,0);
  var removed=0;
  for(var i=data.rows.length-1;i>=0;i--){
    var row=data.rows[i];
    var flag=row[idx['永久刪除']];
    var del=row[idx['刪除時間']];
    var due=false;
    if(flag===true || String(flag).toLowerCase()==='true') due=true;
    if(!due && del){
      var d = del instanceof Date ? new Date(del) : new Date(del);
      if(!isNaN(d.getTime())){
        d.setHours(0,0,0,0);
        var threshold=new Date(today); threshold.setDate(threshold.getDate()-keepDays);
        if(d<=threshold) due=true;
      }
    }
    if(due){ sh.deleteRow(i+2); removed++; }
  }
  _alert('已清除 '+removed+' 筆');
}

function 清理留言(){
  var sh=留言表();
  var data=_讀表(sh);
  if(!data.rows.length) return _alert('沒有留言');
  var idx=_欄位索引(data.heads);
  var removed=0;
  for(var i=data.rows.length-1;i>=0;i--){
    if(String(data.rows[i][idx['狀態']]||'')==='deleted'){ sh.deleteRow(i+2); removed++; }
  }
  _alert('已移除 '+removed+' 筆留言');
}

function 導出今天(){
  var sh=主表();
  var data=_讀表(sh);
  if(!data.rows.length) return _alert('今天尚未記錄');
  var idx=_欄位索引(data.heads);
  var today=Utilities.formatDate(new Date(),時區,'yyyy-MM-dd');
  var rows=[主表表頭];
  data.rows.forEach(function(row){
    var stamp=Utilities.formatDate(new Date(row[idx['記錄時間']]),時區,'yyyy-MM-dd');
    if(stamp===today) rows.push(row);
  });
  if(rows.length===1) return _alert('今天尚未記錄');
  var name='Export_'+Utilities.formatDate(new Date(),時區,'yyyyMMdd');
  var exist=表().getSheetByName(name); if(exist) 表().deleteSheet(exist);
  var out=表().insertSheet(name);
  out.getRange(1,1,rows.length,rows[0].length).setValues(rows);
  _alert('已建立分頁：'+name);
}

function 導出區間對話框(){
  var ui=SpreadsheetApp.getUi();
  var res=ui.prompt('輸入日期區間','範例：2025-01-01,2025-01-07',ui.ButtonSet.OK_CANCEL);
  if(res.getSelectedButton()!=ui.Button.OK) return;
  var parts=String(res.getResponseText()||'').split(',');
  if(parts.length<2) return _alert('格式不正確');
  導出區間(parts[0].trim(), parts[1].trim());
}

function 導出區間(startStr,endStr){
  var sh=主表();
  var data=_讀表(sh);
  if(!data.rows.length) return _alert('沒有資料');
  var idx=_欄位索引(data.heads);
  var rows=[主表表頭];
  data.rows.forEach(function(row){
    var stamp=Utilities.formatDate(new Date(row[idx['記錄時間']]),時區,'yyyy-MM-dd');
    if(stamp>=startStr && stamp<=endStr) rows.push(row);
  });
  var name='Export_'+Utilities.formatDate(new Date(),時區,'yyyyMMdd')+'_RANGE';
  var exist=表().getSheetByName(name); if(exist) 表().deleteSheet(exist);
  var out=表().insertSheet(name);
  out.getRange(1,1,rows.length,rows[0].length).setValues(rows);
  _alert('已建立分頁：'+name+'（'+(rows.length-1)+' 筆）');
}

