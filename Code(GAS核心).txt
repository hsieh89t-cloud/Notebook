/*
[MoodNotebook_Core]
version: v2.0.0
lang: zh-Hant
說明：
- 主表 MoodJournal：記錄時間｜心情指數｜情緒主題｜標題｜標籤｜正文｜亮點摘錄｜配色｜ID｜回收
- 回收 MoodRecycle：記錄時間｜心情指數｜情緒主題｜標題｜標籤｜正文｜亮點摘錄｜配色｜ID｜刪除時間｜永久刪除
- 留言 MoodComments：留言ID｜筆記ID｜留言時間｜留言者｜留言內容｜狀態
*/

var 試算表ID = '1EwMHfpwD9HMKm0JiFhi7bx1bLPxTgOYrs7gu8ITTi24'; // ← 請換成你自己的 Spreadsheet ID
var 時區 = 'Asia/Taipei';
var 主表名 = 'MoodJournal';
var 回收名 = 'MoodRecycle';
var 留言表名 = 'MoodComments';

var 主表表頭 = ['記錄時間','心情指數','情緒主題','標題','標籤','正文','亮點摘錄','配色','ID','回收'];
var 回收表頭 = ['記錄時間','心情指數','情緒主題','標題','標籤','正文','亮點摘錄','配色','ID','刪除時間','永久刪除'];
var 留言表頭 = ['留言ID','筆記ID','留言時間','留言者','留言內容','狀態'];

// ===== 共用工具 =====
function _表(){ return SpreadsheetApp.openById(試算表ID); }
function _確保表(name, heads){
  var ss=_表();
  var sh=ss.getSheetByName(name);
  if(!sh){
    sh=ss.insertSheet(name);
    if(heads && heads.length){ sh.getRange(1,1,1,heads.length).setValues([heads]); }
  }
  return sh;
}
function _主表(){ return _確保表(主表名, 主表表頭); }
function _回收表(){ return _確保表(回收名, 回收表頭); }
function _留言表(){ return _確保表(留言表名, 留言表頭); }
function _讀表(sh){ var v=sh.getDataRange().getValues(); return {heads:(v[0]||[]).map(String), rows:v.slice(1)}; }
function _欄位索引(heads){ var map={}; heads.forEach(function(h,i){ map[String(h)]=i; }); return map; }
function _isTrue(val){ return val===true || String(val).toLowerCase()==='true' || Number(val)===1; }
function _now(){ return new Date(); }
function _nowISO(){ return Utilities.formatDate(_now(), 時區, "yyyy-MM-dd'T'HH:mm:ssXXX"); }
function _todayISO(){ return Utilities.formatDate(_now(), 時區, 'yyyy-MM-dd HH:mm:ss'); }
function _新ID(prefix){
  var ts = Utilities.formatDate(_now(), 時區, 'yyyyMMddHHmmss');
  var rand = Math.floor(Math.random()*1e8).toString(36);
  return (prefix||'n_') + ts + '_' + rand;
}
function _ok(payload){ return Object.assign({ok:true, ts:_nowISO()}, payload||{}); }
function _err(msg){ return {ok:false, error:String(msg||'發生錯誤'), ts:_nowISO()}; }
function _回應(obj){ return ContentService.createTextOutput(JSON.stringify(obj)).setMimeType(ContentService.MimeType.JSON); }
function _取JSON(e){ if(!e||!e.postData||!e.postData.contents) return {}; try{ return JSON.parse(e.postData.contents); }catch(_){ return {}; } }

// ===== HTTP 入口 =====
function doGet(e){ return _回應(_路由(e,'GET')); }
function doPost(e){ return _回應(_路由(e,'POST')); }

function _路由(e, 方法){
  try{
    var act = (e.parameter.action||'').trim();
    var body = _取JSON(e);
    switch(act){
      case 'ping': return _ok({pong:true, ver:'v2.0.0'});

      // 筆記
      case '列出筆記': return _ok({data: 列出筆記(e)});
      case '取得筆記': return _ok({data: 取得筆記(body.id||e.parameter.id)});
      case '新增筆記': return _ok(新增筆記(body));
      case '修改筆記': return _ok(修改筆記(body));
      case '刪除筆記': return _ok(刪除筆記(body.id||e.parameter.id));
      case '還原筆記': return _ok(還原筆記(body.id||e.parameter.id));

      // 留言
      case '列出留言': return _ok({data: 列出留言(body.noteId||e.parameter.noteId)});
      case '新增留言': return _ok(新增留言(body));
      case '修改留言': return _ok(修改留言(body));
      case '刪除留言': return _ok(刪除留言(body.id||e.parameter.id));

      // 其他
      case '自動清理回收桶': return _ok({purged: 自動清理回收桶(Number(e.parameter.keepDays||body.keepDays||21))});
      case '捷徑寫入心情': return _ok(捷徑寫入心情(body && body.text));

      default:
        if(方法==='GET') return _ok({info:'Mood Notebook Core v2.0.0'});
        throw new Error('未知 action');
    }
  }catch(ex){ return _err(ex.message||String(ex)); }
}

// ===== 核心：筆記 =====
function 列出筆記(e){
  var sh=_主表();
  var data=_讀表(sh);
  if(!data.rows.length) return [];
  var idx=_欄位索引(data.heads);

  var q=(e.parameter.keyword||'').toLowerCase().trim();
  var tag=(e.parameter.tag||'').trim();
  var mood=(e.parameter.mood||'').trim();
  var limit=parseInt(e.parameter.limit||'0',10);

  var commentsMap=_留言統計();
  var items=[];

  data.rows.forEach(function(row){
    if(_isTrue(row[idx['回收']])) return;
    var rec={
      記錄時間: row[idx['記錄時間']],
      心情指數: row[idx['心情指數']],
      情緒主題: row[idx['情緒主題']],
      標題: row[idx['標題']],
      標籤: row[idx['標籤']],
      正文: row[idx['正文']],
      亮點摘錄: row[idx['亮點摘錄']],
      配色: row[idx['配色']],
      ID: row[idx['ID']],
      留言數: commentsMap[row[idx['ID']]]||0
    };
    var hay=(String(rec.標題||'')+' '+String(rec.正文||'')+' '+String(rec.亮點摘錄||'')+' '+String(rec.情緒主題||'')+' '+String(rec.標籤||'')).toLowerCase();
    if(q && hay.indexOf(q)<0) return;
    if(tag){
      var tags = String(rec.標籤||'').split(/[#,，, ]+/).filter(Boolean);
      if(tags.indexOf(tag)<0) return;
    }
    if(mood && String(rec.心情指數||'').indexOf(mood)<0 && String(rec.情緒主題||'')!==mood) return;
    items.push(rec);
  });

  items.sort(function(a,b){
    var t=String(b.記錄時間||'').localeCompare(String(a.記錄時間||''));
    if(t!==0) return t;
    return String(b.ID||'').localeCompare(String(a.ID||''));
  });
  if(limit>0) items=items.slice(0,limit);
  return items;
}

function 取得筆記(id){
  if(!id) throw new Error('缺少 id');
  var sh=_主表();
  var data=_讀表(sh);
  var idx=_欄位索引(data.heads);
  for(var i=0;i<data.rows.length;i++){
    var row=data.rows[i];
    if(String(row[idx['ID']])===String(id)){
      var note={
        記錄時間: row[idx['記錄時間']],
        心情指數: row[idx['心情指數']],
        情緒主題: row[idx['情緒主題']],
        標題: row[idx['標題']],
        標籤: row[idx['標籤']],
        正文: row[idx['正文']],
        亮點摘錄: row[idx['亮點摘錄']],
        配色: row[idx['配色']],
        ID: row[idx['ID']],
        回收: _isTrue(row[idx['回收']])?1:0
      };
      note.留言 = 列出留言(id);
      return note;
    }
  }

  var tr=_回收表();
  var data2=_讀表(tr);
  var idx2=_欄位索引(data2.heads);
  for(var j=0;j<data2.rows.length;j++){
    var row2=data2.rows[j];
    if(String(row2[idx2['ID']])===String(id)){
      return {
        記錄時間: row2[idx2['記錄時間']],
        心情指數: row2[idx2['心情指數']],
        情緒主題: row2[idx2['情緒主題']],
        標題: row2[idx2['標題']],
        標籤: row2[idx2['標籤']],
        正文: row2[idx2['正文']],
        亮點摘錄: row2[idx2['亮點摘錄']],
        配色: row2[idx2['配色']],
        ID: row2[idx2['ID']],
        回收:1,
        刪除時間: row2[idx2['刪除時間']],
        留言: 列出留言(id)
      };
    }
  }
  throw new Error('找不到指定 ID');
}

function 新增筆記(p){
  p=p||{};
  var rec=_整備筆記(p);
  _主表().appendRow([rec.記錄時間,rec.心情指數,rec.情緒主題,rec.標題,rec.標籤,rec.正文,rec.亮點摘錄,rec.配色,rec.ID,'']);
  return {id:rec.ID, created:true};
}

function 修改筆記(p){
  if(!p||!p.id) throw new Error('缺少 id');
  var sh=_主表();
  var data=_讀表(sh);
  var idx=_欄位索引(data.heads);
  for(var i=0;i<data.rows.length;i++){
    var row=data.rows[i];
    if(String(row[idx['ID']])===String(p.id)){
      if(p['記錄時間']!==undefined) row[idx['記錄時間']]=p['記錄時間'];
      if(p['心情指數']!==undefined) row[idx['心情指數']]=p['心情指數'];
      if(p['情緒主題']!==undefined) row[idx['情緒主題']]=p['情緒主題'];
      if(p['標題']!==undefined) row[idx['標題']]=p['標題'];
      if(p['標籤']!==undefined) row[idx['標籤']]=p['標籤'];
      if(p['正文']!==undefined) row[idx['正文']]=p['正文'];
      if(p['亮點摘錄']!==undefined) row[idx['亮點摘錄']]=p['亮點摘錄'];
      if(p['配色']!==undefined) row[idx['配色']]=p['配色'];
      sh.getRange(i+2,1,1,data.heads.length).setValues([row]);
      return {id:p.id, updated:true};
    }
  }
  throw new Error('找不到指定 ID（僅能修改主表筆記）');
}

function 刪除筆記(id){
  if(!id) throw new Error('缺少 id');
  var sh=_主表();
  var data=_讀表(sh);
  var idx=_欄位索引(data.heads);
  for(var i=data.rows.length-1;i>=0;i--){
    var row=data.rows[i];
    if(String(row[idx['ID']])===String(id)){
      row[idx['回收']]=true;
      _回收表().appendRow([row[idx['記錄時間']],row[idx['心情指數']],row[idx['情緒主題']],row[idx['標題']],row[idx['標籤']],row[idx['正文']],row[idx['亮點摘錄']],row[idx['配色']],row[idx['ID']],_todayISO(),""]);
      sh.deleteRow(i+2);
      return {trashed:true};
    }
  }
  return {trashed:false};
}

function 還原筆記(id){
  if(!id) throw new Error('缺少 id');
  var sh=_回收表();
  var data=_讀表(sh);
  var idx=_欄位索引(data.heads);
  for(var i=data.rows.length-1;i>=0;i--){
    var row=data.rows[i];
    if(String(row[idx['ID']])===String(id)){
      _主表().appendRow([row[idx['記錄時間']],row[idx['心情指數']],row[idx['情緒主題']],row[idx['標題']],row[idx['標籤']],row[idx['正文']],row[idx['亮點摘錄']],row[idx['配色']],row[idx['ID']],""]);
      sh.deleteRow(i+2);
      return {restored:true};
    }
  }
  return {restored:false};
}

function 自動清理回收桶(keepDays){
  keepDays = Number(keepDays||21);
  var sh=_回收表();
  var data=_讀表(sh);
  if(!data.rows.length) return 0;
  var idx=_欄位索引(data.heads);
  var deadline=new Date();
  deadline.setHours(0,0,0,0);
  deadline.setDate(deadline.getDate()-keepDays);
  var purged=0;
  for(var i=data.rows.length-1;i>=0;i--){
    var row=data.rows[i];
    var flag=row[idx['永久刪除']];
    var deletedAt=row[idx['刪除時間']];
    var isFlagged=_isTrue(flag);
    var isExpired=false;
    if(deletedAt instanceof Date){
      var d=new Date(deletedAt); d.setHours(0,0,0,0);
      isExpired = d <= deadline;
    }else if(deletedAt){
      try{
        var parts=new Date(deletedAt);
        if(!isNaN(parts.getTime())){
          parts.setHours(0,0,0,0);
          isExpired = parts <= deadline;
        }
      }catch(_){ }
    }
    if(isFlagged || isExpired){
      sh.deleteRow(i+2);
      purged++;
    }
  }
  return purged;
}

// ===== 留言 =====
function 列出留言(noteId){
  if(!noteId) return [];
  var sh=_留言表();
  var data=_讀表(sh);
  if(!data.rows.length) return [];
  var idx=_欄位索引(data.heads);
  var items=[];
  data.rows.forEach(function(row){
    if(String(row[idx['筆記ID']])!==String(noteId)) return;
    if(String(row[idx['狀態']]||'')==='deleted') return;
    items.push({
      留言ID: row[idx['留言ID']],
      筆記ID: row[idx['筆記ID']],
      留言時間: row[idx['留言時間']],
      留言者: row[idx['留言者']],
      留言內容: row[idx['留言內容']]
    });
  });
  items.sort(function(a,b){
    var t=String(a.留言時間||'').localeCompare(String(b.留言時間||''));
    if(t!==0) return t;
    return String(a.留言ID||'').localeCompare(String(b.留言ID||''));
  });
  return items;
}

function _留言統計(){
  var sh=_留言表();
  var data=_讀表(sh);
  if(!data.rows.length) return {};
  var idx=_欄位索引(data.heads);
  var map={};
  data.rows.forEach(function(row){
    if(String(row[idx['狀態']]||'')==='deleted') return;
    var noteId=row[idx['筆記ID']];
    if(!noteId) return;
    map[noteId]=(map[noteId]||0)+1;
  });
  return map;
}

function 新增留言(p){
  if(!p||!p.noteId) throw new Error('缺少 noteId');
  var content=(p['留言內容']||p['content']||'').trim();
  if(!content) throw new Error('留言內容不得為空');
  var name=p['留言者']||p['author']||'Me';
  var id=_新ID('c_');
  _留言表().appendRow([id, p.noteId, _todayISO(), name, content, '']);
  return {id:id, created:true};
}

function 修改留言(p){
  if(!p||!p.id) throw new Error('缺少 id');
  var sh=_留言表();
  var data=_讀表(sh);
  var idx=_欄位索引(data.heads);
  for(var i=0;i<data.rows.length;i++){
    var row=data.rows[i];
    if(String(row[idx['留言ID']])===String(p.id)){
      if(p['留言內容']!==undefined) row[idx['留言內容']]=p['留言內容'];
      if(p['留言者']!==undefined) row[idx['留言者']]=p['留言者'];
      sh.getRange(i+2,1,1,data.heads.length).setValues([row]);
      return {id:p.id, updated:true};
    }
  }
  throw new Error('找不到留言');
}

function 刪除留言(id){
  if(!id) throw new Error('缺少 id');
  var sh=_留言表();
  var data=_讀表(sh);
  var idx=_欄位索引(data.heads);
  for(var i=data.rows.length-1;i>=0;i--){
    var row=data.rows[i];
    if(String(row[idx['留言ID']])===String(id)){
      row[idx['狀態']]='deleted';
      sh.getRange(i+2,1,1,data.heads.length).setValues([row]);
      return {id:id, deleted:true};
    }
  }
  return {id:id, deleted:false};
}

// ===== 捷徑文字解析 =====
function _整備筆記(p){
  var rec={
    記錄時間: p['記錄時間']||p['日期']||_todayISO(),
    心情指數: p['心情指數']||p['心情']||'',
    情緒主題: p['情緒主題']||p['分類']||'',
    標題: p['標題']||'',
    標籤: p['標籤']||p['tags']||'',
    正文: p['正文']||p['內容']||'',
    亮點摘錄: p['亮點摘錄']||p['亮點']||'',
    配色: p['配色']||p['color']||'',
    ID: p['ID']||p['id']||_新ID('n_')
  };
  if(!rec.標題){
    rec.標題 = rec.亮點摘錄 || (String(rec.正文||'').split(/\n+/)[0]||'心情記錄');
    if(rec.標題.length>20) rec.標題=rec.標題.slice(0,20)+'…';
  }
  if(!rec.亮點摘錄){
    var firstLine=String(rec.正文||'').split(/\n+/)[0];
    rec.亮點摘錄 = firstLine ? firstLine.slice(0,40) : '';
  }
  return rec;
}

function 捷徑寫入心情(text){
  if(!text) throw new Error('缺少文字內容');
  var parsed=_解析捷徑文字(String(text));
  var rec=_整備筆記(parsed);
  _主表().appendRow([rec.記錄時間,rec.心情指數,rec.情緒主題,rec.標題,rec.標籤,rec.正文,rec.亮點摘錄,rec.配色,rec.ID,'']);
  return {id:rec.ID, created:true};
}

function _解析捷徑文字(text){
  var lines=String(text||'').split(/\r?\n/);
  var out={};
  var body=[];
  var tags=[];
  lines.forEach(function(line){
    var trimmed=line.trim();
    if(!trimmed) return;
    var m=trimmed.match(/^心情指數\s*[：:]{1}\s*(.+)$/);
    if(m){ out['心情指數']=m[1]; return; }
    m=trimmed.match(/^情緒主題\s*[：:]{1}\s*(.+)$/);
    if(m){ out['情緒主題']=m[1]; return; }
    m=trimmed.match(/^標題\s*[：:]{1}\s*(.+)$/);
    if(m){ out['標題']=m[1]; return; }
    m=trimmed.match(/^亮點\s*[：:]{1}\s*(.+)$/);
    if(m){ out['亮點摘錄']=m[1]; return; }
    m=trimmed.match(/^配色\s*[：:]{1}\s*(.+)$/);
    if(m){ out['配色']=m[1]; return; }
    var tagMatches=trimmed.match(/#[^#\s]+/g);
    if(tagMatches){
      tagMatches.forEach(function(t){ tags.push(t.replace(/^#/,'').trim()); });
      trimmed=trimmed.replace(/#[^#\s]+/g,'').trim();
    }
    if(trimmed) body.push(trimmed);
  });
  if(tags.length) out['標籤']=tags.join(',');
  out['正文']=body.join('\n');
  out['記錄時間']=_todayISO();
  return out;
}

